name: Basic CI

on:
  push:
    branches: [main, development, feature/*]
  pull_request:
    branches: [main, development, feature/*]

jobs:
  post-commit:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass123
      POSTGRES_DB: testdb
      POSTGRES_HOST_AUTH_METHOD: md5
      HOST: ${{ secrets.HOST }}
      PORT: ${{ secrets.PORT }}
      RELOAD: ${{ secrets.RELOAD }}
      
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass123
          POSTGRES_DB: testdb
          POSTGRES_HOST_AUTH_METHOD: md5
        options: >-
          --health-cmd "pg_isready -h localhost -p 5432 -U testuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          architecture: "x64"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/uv.lock', '**/pyproject.toml') }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run Ruff
        run: uv run ruff check .

      - name: Build Docker image
        run: docker build -f Dockerfile -t flowcart .

      - name: Wait for Postgres (robust)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          export PGPASSWORD=testpass123
          ATTEMPTS=0
          until PGPASSWORD=$PGPASSWORD psql -h localhost -U testuser -d testdb -c '\q' > /dev/null 2>&1; do
            ATTEMPTS=$((ATTEMPTS+1))
            echo "Postgres not ready yet (attempt $ATTEMPTS), sleeping 2s..."
            sleep 2
            if [ $ATTEMPTS -ge 120 ]; then
              echo "Postgres failed to become ready after $ATTEMPTS attempts â€” printing logs"
              docker ps --filter ancestor=postgres:15 --format 'table {{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}'
              docker ps --filter ancestor=postgres:15 --quiet | xargs -r docker logs --tail 500
              exit 1
            fi
          done
          echo "Postgres is ready"

      - name: Run pytest (full suite)
        run: uv run pytest
